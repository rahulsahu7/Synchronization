import java.util.concurrent.atomic.AtomicInteger;

public class AtomicExampleNotThreadSafe2 {
    public static void main(String[] args) throws InterruptedException {
        AtomicInteger counter = new AtomicInteger(0);
        AtomicInteger newValue = new AtomicInteger(0);
        AtomicInteger currentValue = new AtomicInteger(0);
        Runnable incrementTask = () -> {
            for (int i = 0; i < 10000; i++) {
                currentValue.set(counter.get());
                 newValue.set(currentValue.getAndIncrement());
                counter.set(newValue.get());
            }
        };

        Thread thread1 = new Thread(incrementTask);
        Thread thread2 = new Thread(incrementTask);

        thread1.start();
        thread2.start();

        thread1.join();
        thread2.join();

        System.out.println("Final Counter Value: " + counter.get());
    }
}
